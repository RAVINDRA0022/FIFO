`timescale 1ns / 1ps

module async_fifo_tb;

    parameter DATA_WIDTH = 8;
    parameter FIFO_DEPTH = 90;

    reg wr_clk;
    reg rd_clk;
    reg rst_n;
    reg wr_en;
    reg rd_en;
    reg [DATA_WIDTH-1:0] wr_data;
    wire [DATA_WIDTH-1:0] rd_data;
    wire full;
    wire empty;

    async_fifo #(
        .DATA_WIDTH(DATA_WIDTH),
        .FIFO_DEPTH(FIFO_DEPTH)
    ) uut (
        .wr_clk(wr_clk),
        .rd_clk(rd_clk),
        .rst_n(rst_n),
        .wr_en(wr_en),
        .rd_en(rd_en),
        .wr_data(wr_data),
        .rd_data(rd_data),
        .full(full),
        .empty(empty)
    );

    initial begin
        wr_clk = 0;
        forever #5 wr_clk = ~wr_clk; // 100 MHz write clock (10 ns period)
    end

    initial begin
        rd_clk = 0;
        forever #20 rd_clk = ~rd_clk; // 25 MHz read clock (40 ns period)
    end

    initial begin
        rst_n = 0;
        wr_en = 0;
        rd_en = 0;
        wr_data = 0;

        #50 rst_n = 1;

        $display("Starting write test...");
        repeat (FIFO_DEPTH + 5) begin 
            @(posedge wr_clk);
            if (!full) begin
                wr_en = 1;
                wr_data = wr_data + 1; 
                $display("Writing Data: %d", wr_data);
            end else begin
                wr_en = 0; 
                $display("FIFO Full: Cannot write further.");
            end
        end
        wr_en = 0;

        $display("Starting read test...");
        repeat (FIFO_DEPTH + 5) begin
            @(posedge rd_clk);
            if (!empty) begin
                rd_en = 1;
                $display("Reading Data: %d", rd_data);
            end else begin
                rd_en = 0; 
                $display("FIFO Empty: Cannot read further.");
            end
        end
        rd_en = 0;

        if (empty) $display("Test Complete: FIFO is empty.");
        else $display("Test Error: FIFO should be empty but isn't.");

        $stop;
    end
endmodule
